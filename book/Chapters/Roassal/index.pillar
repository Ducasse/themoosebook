!Painting objects with RoassalDigital data has no physical shape. While this allows us to manipulate easily great amounts of data, it poses a problem when it comes to understanding this data and assessing its state. The lack of physical shape renders useless our built-in skill of perceiving the world around us through visual stimuli.Visualization aims to solve this problem by offering a visual skin to data. “A picture tells a thousand words” goes the old adage. And so it does, but only if the picture is the right one.What makes a picture appropriate? Well, it has to focus on one or more relevant questions, and it has to take the particularities of data into account.There are many tools out there providing nice and useful visualizations for interesting questions. However, many of them offer only limited customization possibilities, and this makes them less useful in particular circumstances.To address this issue, the Moose platform ships with Roassal, an engine for scripting interactive visualizations.!!Roassal in actionThe ==ArgoUML-0-34== case study contains several modules that can be distinguished by the appearance of a ==build.xml== file in the module root folder.Where are these modules located throughout the overall folder structure? To find this out, we visualize the tree of folders.[[[interestingDirectories := self withDeepCollect: [: each | 	(each files anySatisfy: [ :f | f basename asLowercase = 'build.xml' ])		ifTrue: [ #() ]		ifFalse: [ each directories ] ].view := RTMondrian new.view shape circle	size: 5;	if: [ :each | each files anySatisfy: [ :f | f basename asLowercase = 'build.xml' ] ] color: Color red.view nodes: interestingDirectories.view edges connectFrom: #parent.view layout tree.]]]+Sub projects as tree>file://figures/inspector-roassal-argo-modules-tree.png+Visualize the location of project directories using a circular tree map:[[[b := RTCircularTreeMapBuilder new.b shape if: [ :each | each files anySatisfy: [ :f | f basename asLowercase = 'build.xml' ] ] color: Color red.b leafWeight: 1.b explore: self nesting: #directories leaves: #directories.b]]]+Sub projects as tree map>file://figures/inspector-roassal-argo-modules-treemap.png+Visualize the location of project directories using a sunburst:[[[b := RTSunburstBuilder new.b shape color: [ :each | (each files anySatisfy: [ :f | f basename asLowercase = 'build.xml' ]) ifTrue: [ Color red ] ifFalse: [ Color lightGray ] ].b leafWeight: 1.b angularSpacing: 5.b explore: self nesting: #directories leaves: #directories.b]]]+Sub projects as sunbirst>file://figures/inspector-roassal-argo-modules-sunburst.png+!!Visualizing dependencies between target [[[tags := (XMLDOMParser parse: self) // 'target'.view := RTMondrian new.view nodes: tags.view edges connectFromAll:  [:aTag | |depends|	depends:=(aTag @ 'depends') stringValue splitOn: ', '.	tags select: [ :each | 		depends includes: (each @ 'name') stringValue] ].view layout dominanceTree.view.]]]